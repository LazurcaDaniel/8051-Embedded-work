                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module src
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _func
                                     13 	.globl _printKey
                                     14 	.globl _readValue
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _F1
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _B
                                     91 	.globl _ACC
                                     92 	.globl _PSW
                                     93 	.globl _IP
                                     94 	.globl _P3
                                     95 	.globl _IE
                                     96 	.globl _P2
                                     97 	.globl _SBUF
                                     98 	.globl _SCON
                                     99 	.globl _P1
                                    100 	.globl _TH1
                                    101 	.globl _TH0
                                    102 	.globl _TL1
                                    103 	.globl _TL0
                                    104 	.globl _TMOD
                                    105 	.globl _TCON
                                    106 	.globl _PCON
                                    107 	.globl _DPH
                                    108 	.globl _DPL
                                    109 	.globl _SP
                                    110 	.globl _P0
                                    111 	.globl _value
                                    112 ;--------------------------------------------------------
                                    113 ; special function registers
                                    114 ;--------------------------------------------------------
                                    115 	.area RSEG    (ABS,DATA)
      000000                        116 	.org 0x0000
                           000080   117 _P0	=	0x0080
                           000081   118 _SP	=	0x0081
                           000082   119 _DPL	=	0x0082
                           000083   120 _DPH	=	0x0083
                           000087   121 _PCON	=	0x0087
                           000088   122 _TCON	=	0x0088
                           000089   123 _TMOD	=	0x0089
                           00008A   124 _TL0	=	0x008a
                           00008B   125 _TL1	=	0x008b
                           00008C   126 _TH0	=	0x008c
                           00008D   127 _TH1	=	0x008d
                           000090   128 _P1	=	0x0090
                           000098   129 _SCON	=	0x0098
                           000099   130 _SBUF	=	0x0099
                           0000A0   131 _P2	=	0x00a0
                           0000A8   132 _IE	=	0x00a8
                           0000B0   133 _P3	=	0x00b0
                           0000B8   134 _IP	=	0x00b8
                           0000D0   135 _PSW	=	0x00d0
                           0000E0   136 _ACC	=	0x00e0
                           0000F0   137 _B	=	0x00f0
                                    138 ;--------------------------------------------------------
                                    139 ; special function bits
                                    140 ;--------------------------------------------------------
                                    141 	.area RSEG    (ABS,DATA)
      000000                        142 	.org 0x0000
                           000080   143 _P0_0	=	0x0080
                           000081   144 _P0_1	=	0x0081
                           000082   145 _P0_2	=	0x0082
                           000083   146 _P0_3	=	0x0083
                           000084   147 _P0_4	=	0x0084
                           000085   148 _P0_5	=	0x0085
                           000086   149 _P0_6	=	0x0086
                           000087   150 _P0_7	=	0x0087
                           000088   151 _IT0	=	0x0088
                           000089   152 _IE0	=	0x0089
                           00008A   153 _IT1	=	0x008a
                           00008B   154 _IE1	=	0x008b
                           00008C   155 _TR0	=	0x008c
                           00008D   156 _TF0	=	0x008d
                           00008E   157 _TR1	=	0x008e
                           00008F   158 _TF1	=	0x008f
                           000090   159 _P1_0	=	0x0090
                           000091   160 _P1_1	=	0x0091
                           000092   161 _P1_2	=	0x0092
                           000093   162 _P1_3	=	0x0093
                           000094   163 _P1_4	=	0x0094
                           000095   164 _P1_5	=	0x0095
                           000096   165 _P1_6	=	0x0096
                           000097   166 _P1_7	=	0x0097
                           000098   167 _RI	=	0x0098
                           000099   168 _TI	=	0x0099
                           00009A   169 _RB8	=	0x009a
                           00009B   170 _TB8	=	0x009b
                           00009C   171 _REN	=	0x009c
                           00009D   172 _SM2	=	0x009d
                           00009E   173 _SM1	=	0x009e
                           00009F   174 _SM0	=	0x009f
                           0000A0   175 _P2_0	=	0x00a0
                           0000A1   176 _P2_1	=	0x00a1
                           0000A2   177 _P2_2	=	0x00a2
                           0000A3   178 _P2_3	=	0x00a3
                           0000A4   179 _P2_4	=	0x00a4
                           0000A5   180 _P2_5	=	0x00a5
                           0000A6   181 _P2_6	=	0x00a6
                           0000A7   182 _P2_7	=	0x00a7
                           0000A8   183 _EX0	=	0x00a8
                           0000A9   184 _ET0	=	0x00a9
                           0000AA   185 _EX1	=	0x00aa
                           0000AB   186 _ET1	=	0x00ab
                           0000AC   187 _ES	=	0x00ac
                           0000AF   188 _EA	=	0x00af
                           0000B0   189 _P3_0	=	0x00b0
                           0000B1   190 _P3_1	=	0x00b1
                           0000B2   191 _P3_2	=	0x00b2
                           0000B3   192 _P3_3	=	0x00b3
                           0000B4   193 _P3_4	=	0x00b4
                           0000B5   194 _P3_5	=	0x00b5
                           0000B6   195 _P3_6	=	0x00b6
                           0000B7   196 _P3_7	=	0x00b7
                           0000B0   197 _RXD	=	0x00b0
                           0000B1   198 _TXD	=	0x00b1
                           0000B2   199 _INT0	=	0x00b2
                           0000B3   200 _INT1	=	0x00b3
                           0000B4   201 _T0	=	0x00b4
                           0000B5   202 _T1	=	0x00b5
                           0000B6   203 _WR	=	0x00b6
                           0000B7   204 _RD	=	0x00b7
                           0000B8   205 _PX0	=	0x00b8
                           0000B9   206 _PT0	=	0x00b9
                           0000BA   207 _PX1	=	0x00ba
                           0000BB   208 _PT1	=	0x00bb
                           0000BC   209 _PS	=	0x00bc
                           0000D0   210 _P	=	0x00d0
                           0000D1   211 _F1	=	0x00d1
                           0000D2   212 _OV	=	0x00d2
                           0000D3   213 _RS0	=	0x00d3
                           0000D4   214 _RS1	=	0x00d4
                           0000D5   215 _F0	=	0x00d5
                           0000D6   216 _AC	=	0x00d6
                           0000D7   217 _CY	=	0x00d7
                                    218 ;--------------------------------------------------------
                                    219 ; overlayable register banks
                                    220 ;--------------------------------------------------------
                                    221 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        222 	.ds 8
                                    223 ;--------------------------------------------------------
                                    224 ; overlayable bit register bank
                                    225 ;--------------------------------------------------------
                                    226 	.area BIT_BANK	(REL,OVR,DATA)
      000020                        227 bits:
      000020                        228 	.ds 1
                           008000   229 	b0 = bits[0]
                           008100   230 	b1 = bits[1]
                           008200   231 	b2 = bits[2]
                           008300   232 	b3 = bits[3]
                           008400   233 	b4 = bits[4]
                           008500   234 	b5 = bits[5]
                           008600   235 	b6 = bits[6]
                           008700   236 	b7 = bits[7]
                                    237 ;--------------------------------------------------------
                                    238 ; internal ram data
                                    239 ;--------------------------------------------------------
                                    240 	.area DSEG    (DATA)
      000008                        241 _value::
      000008                        242 	.ds 1
                                    243 ;--------------------------------------------------------
                                    244 ; overlayable items in internal ram
                                    245 ;--------------------------------------------------------
                                    246 	.area	OSEG    (OVR,DATA)
                                    247 ;--------------------------------------------------------
                                    248 ; Stack segment in internal ram
                                    249 ;--------------------------------------------------------
                                    250 	.area SSEG
      000021                        251 __start__stack:
      000021                        252 	.ds	1
                                    253 
                                    254 ;--------------------------------------------------------
                                    255 ; indirectly addressable internal ram data
                                    256 ;--------------------------------------------------------
                                    257 	.area ISEG    (DATA)
                                    258 ;--------------------------------------------------------
                                    259 ; absolute internal ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area IABS    (ABS,DATA)
                                    262 	.area IABS    (ABS,DATA)
                                    263 ;--------------------------------------------------------
                                    264 ; bit data
                                    265 ;--------------------------------------------------------
                                    266 	.area BSEG    (BIT)
                                    267 ;--------------------------------------------------------
                                    268 ; paged external ram data
                                    269 ;--------------------------------------------------------
                                    270 	.area PSEG    (PAG,XDATA)
                                    271 ;--------------------------------------------------------
                                    272 ; uninitialized external ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area XSEG    (XDATA)
                                    275 ;--------------------------------------------------------
                                    276 ; absolute external ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area XABS    (ABS,XDATA)
                                    279 ;--------------------------------------------------------
                                    280 ; initialized external ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area XISEG   (XDATA)
                                    283 	.area HOME    (CODE)
                                    284 	.area GSINIT0 (CODE)
                                    285 	.area GSINIT1 (CODE)
                                    286 	.area GSINIT2 (CODE)
                                    287 	.area GSINIT3 (CODE)
                                    288 	.area GSINIT4 (CODE)
                                    289 	.area GSINIT5 (CODE)
                                    290 	.area GSINIT  (CODE)
                                    291 	.area GSFINAL (CODE)
                                    292 	.area CSEG    (CODE)
                                    293 ;--------------------------------------------------------
                                    294 ; interrupt vector
                                    295 ;--------------------------------------------------------
                                    296 	.area HOME    (CODE)
      000000                        297 __interrupt_vect:
      000000 02 00 11         [24]  298 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  299 	reti
      000004                        300 	.ds	7
      00000B 02 01 14         [24]  301 	ljmp	_func
                                    302 ;--------------------------------------------------------
                                    303 ; global & static initialisations
                                    304 ;--------------------------------------------------------
                                    305 	.area HOME    (CODE)
                                    306 	.area GSINIT  (CODE)
                                    307 	.area GSFINAL (CODE)
                                    308 	.area GSINIT  (CODE)
                                    309 	.globl __sdcc_gsinit_startup
                                    310 	.globl __sdcc_program_startup
                                    311 	.globl __start__stack
                                    312 	.globl __mcs51_genXINIT
                                    313 	.globl __mcs51_genXRAMCLEAR
                                    314 	.globl __mcs51_genRAMCLEAR
                                    315 	.area GSFINAL (CODE)
      00006A 02 00 0E         [24]  316 	ljmp	__sdcc_program_startup
                                    317 ;--------------------------------------------------------
                                    318 ; Home
                                    319 ;--------------------------------------------------------
                                    320 	.area HOME    (CODE)
                                    321 	.area HOME    (CODE)
      00000E                        322 __sdcc_program_startup:
      00000E 02 01 6F         [24]  323 	ljmp	_main
                                    324 ;	return from main will return to caller
                                    325 ;--------------------------------------------------------
                                    326 ; code
                                    327 ;--------------------------------------------------------
                                    328 	.area CSEG    (CODE)
                                    329 ;------------------------------------------------------------
                                    330 ;Allocation info for local variables in function 'readValue'
                                    331 ;------------------------------------------------------------
                                    332 ;	.\src.c:5: unsigned char readValue(){
                                    333 ;	-----------------------------------------
                                    334 ;	 function readValue
                                    335 ;	-----------------------------------------
      00006D                        336 _readValue:
                           000007   337 	ar7 = 0x07
                           000006   338 	ar6 = 0x06
                           000005   339 	ar5 = 0x05
                           000004   340 	ar4 = 0x04
                           000003   341 	ar3 = 0x03
                           000002   342 	ar2 = 0x02
                           000001   343 	ar1 = 0x01
                           000000   344 	ar0 = 0x00
                                    345 ;	.\src.c:6: P0 = 0b01110111;///P0_7 = 0, P0_3 = 0
      00006D 75 80 77         [24]  346 	mov	_P0,#0x77
                                    347 ;	.\src.c:7: if(P0_6 == 0){
      000070 20 86 04         [24]  348 	jb	_P0_6,00107$
                                    349 ;	.\src.c:8: return 1;
      000073 75 82 01         [24]  350 	mov	dpl, #0x01
      000076 22               [24]  351 	ret
      000077                        352 00107$:
                                    353 ;	.\src.c:10: else if(P0_5 == 0){
      000077 20 85 04         [24]  354 	jb	_P0_5,00104$
                                    355 ;	.\src.c:11: return 2;
      00007A 75 82 02         [24]  356 	mov	dpl, #0x02
      00007D 22               [24]  357 	ret
      00007E                        358 00104$:
                                    359 ;	.\src.c:13: else if(P0_4 == 0){
      00007E 20 84 04         [24]  360 	jb	_P0_4,00108$
                                    361 ;	.\src.c:14: return 3;
      000081 75 82 03         [24]  362 	mov	dpl, #0x03
      000084 22               [24]  363 	ret
      000085                        364 00108$:
                                    365 ;	.\src.c:17: P0 = 0b01111011; ///P0_2 = 0
      000085 75 80 7B         [24]  366 	mov	_P0,#0x7b
                                    367 ;	.\src.c:18: if(P0_6 == 0){
      000088 20 86 04         [24]  368 	jb	_P0_6,00115$
                                    369 ;	.\src.c:19: return 4;
      00008B 75 82 04         [24]  370 	mov	dpl, #0x04
      00008E 22               [24]  371 	ret
      00008F                        372 00115$:
                                    373 ;	.\src.c:21: else if(P0_5 == 0){
      00008F 20 85 04         [24]  374 	jb	_P0_5,00112$
                                    375 ;	.\src.c:22: return 5;
      000092 75 82 05         [24]  376 	mov	dpl, #0x05
      000095 22               [24]  377 	ret
      000096                        378 00112$:
                                    379 ;	.\src.c:24: else if(P0_4 == 0){
      000096 20 84 04         [24]  380 	jb	_P0_4,00116$
                                    381 ;	.\src.c:25: return 6;
      000099 75 82 06         [24]  382 	mov	dpl, #0x06
      00009C 22               [24]  383 	ret
      00009D                        384 00116$:
                                    385 ;	.\src.c:27: P0 = 0b011111101;
      00009D 75 80 FD         [24]  386 	mov	_P0,#0xfd
                                    387 ;	.\src.c:28: if(P0_6 == 0){
      0000A0 20 86 04         [24]  388 	jb	_P0_6,00123$
                                    389 ;	.\src.c:29: return 7;
      0000A3 75 82 07         [24]  390 	mov	dpl, #0x07
      0000A6 22               [24]  391 	ret
      0000A7                        392 00123$:
                                    393 ;	.\src.c:31: else if(P0_5 == 0){
      0000A7 20 85 04         [24]  394 	jb	_P0_5,00120$
                                    395 ;	.\src.c:32: return 8;
      0000AA 75 82 08         [24]  396 	mov	dpl, #0x08
      0000AD 22               [24]  397 	ret
      0000AE                        398 00120$:
                                    399 ;	.\src.c:34: else if(P0_4 == 0){
      0000AE 20 84 04         [24]  400 	jb	_P0_4,00124$
                                    401 ;	.\src.c:35: return 9;
      0000B1 75 82 09         [24]  402 	mov	dpl, #0x09
      0000B4 22               [24]  403 	ret
      0000B5                        404 00124$:
                                    405 ;	.\src.c:37: P0 = 0b011111110;
      0000B5 75 80 FE         [24]  406 	mov	_P0,#0xfe
                                    407 ;	.\src.c:38: if(P0_5 == 0)
      0000B8 20 85 04         [24]  408 	jb	_P0_5,00126$
                                    409 ;	.\src.c:39: return 0;
      0000BB 75 82 00         [24]  410 	mov	dpl, #0x00
      0000BE 22               [24]  411 	ret
      0000BF                        412 00126$:
                                    413 ;	.\src.c:41: return 10;
      0000BF 75 82 0A         [24]  414 	mov	dpl, #0x0a
                                    415 ;	.\src.c:43: }
      0000C2 22               [24]  416 	ret
                                    417 ;------------------------------------------------------------
                                    418 ;Allocation info for local variables in function 'printKey'
                                    419 ;------------------------------------------------------------
                                    420 ;value                     Allocated to registers r7 
                                    421 ;------------------------------------------------------------
                                    422 ;	.\src.c:45: void printKey( unsigned char value) {
                                    423 ;	-----------------------------------------
                                    424 ;	 function printKey
                                    425 ;	-----------------------------------------
      0000C3                        426 _printKey:
                                    427 ;	.\src.c:47: switch (value) {
      0000C3 E5 82            [12]  428 	mov	a,dpl
      0000C5 FF               [12]  429 	mov	r7,a
      0000C6 24 F6            [12]  430 	add	a,#0xff - 0x09
      0000C8 40 49            [24]  431 	jc	00113$
      0000CA EF               [12]  432 	mov	a,r7
      0000CB 24 0A            [12]  433 	add	a,#(00122$-3-.)
      0000CD 83               [24]  434 	movc	a,@a+pc
      0000CE F5 82            [12]  435 	mov	dpl,a
      0000D0 EF               [12]  436 	mov	a,r7
      0000D1 24 0E            [12]  437 	add	a,#(00123$-3-.)
      0000D3 83               [24]  438 	movc	a,@a+pc
      0000D4 F5 83            [12]  439 	mov	dph,a
      0000D6 E4               [12]  440 	clr	a
      0000D7 73               [24]  441 	jmp	@a+dptr
      0000D8                        442 00122$:
      0000D8 EC                     443 	.db	00101$
      0000D9 F0                     444 	.db	00102$
      0000DA F4                     445 	.db	00103$
      0000DB F8                     446 	.db	00104$
      0000DC FC                     447 	.db	00105$
      0000DD 00                     448 	.db	00106$
      0000DE 04                     449 	.db	00107$
      0000DF 08                     450 	.db	00108$
      0000E0 0C                     451 	.db	00109$
      0000E1 10                     452 	.db	00110$
      0000E2                        453 00123$:
      0000E2 00                     454 	.db	00101$>>8
      0000E3 00                     455 	.db	00102$>>8
      0000E4 00                     456 	.db	00103$>>8
      0000E5 00                     457 	.db	00104$>>8
      0000E6 00                     458 	.db	00105$>>8
      0000E7 01                     459 	.db	00106$>>8
      0000E8 01                     460 	.db	00107$>>8
      0000E9 01                     461 	.db	00108$>>8
      0000EA 01                     462 	.db	00109$>>8
      0000EB 01                     463 	.db	00110$>>8
                                    464 ;	.\src.c:48: case 0:
      0000EC                        465 00101$:
                                    466 ;	.\src.c:49: P1 = 0b11000000;
      0000EC 75 90 C0         [24]  467 	mov	_P1,#0xc0
                                    468 ;	.\src.c:50: break;
                                    469 ;	.\src.c:51: case 1:
      0000EF 22               [24]  470 	ret
      0000F0                        471 00102$:
                                    472 ;	.\src.c:52: P1 = 0b11111001;
      0000F0 75 90 F9         [24]  473 	mov	_P1,#0xf9
                                    474 ;	.\src.c:53: break;
                                    475 ;	.\src.c:54: case 2:
      0000F3 22               [24]  476 	ret
      0000F4                        477 00103$:
                                    478 ;	.\src.c:55: P1 = 0b10100100;
      0000F4 75 90 A4         [24]  479 	mov	_P1,#0xa4
                                    480 ;	.\src.c:56: break;
                                    481 ;	.\src.c:57: case 3:
      0000F7 22               [24]  482 	ret
      0000F8                        483 00104$:
                                    484 ;	.\src.c:58: P1 = 0b10110000;
      0000F8 75 90 B0         [24]  485 	mov	_P1,#0xb0
                                    486 ;	.\src.c:59: break;
                                    487 ;	.\src.c:60: case 4:
      0000FB 22               [24]  488 	ret
      0000FC                        489 00105$:
                                    490 ;	.\src.c:61: P1 = 0b10011001;
      0000FC 75 90 99         [24]  491 	mov	_P1,#0x99
                                    492 ;	.\src.c:62: break;
                                    493 ;	.\src.c:63: case 5:
      0000FF 22               [24]  494 	ret
      000100                        495 00106$:
                                    496 ;	.\src.c:64: P1 = 0b10010010;
      000100 75 90 92         [24]  497 	mov	_P1,#0x92
                                    498 ;	.\src.c:65: break;
                                    499 ;	.\src.c:66: case 6:
      000103 22               [24]  500 	ret
      000104                        501 00107$:
                                    502 ;	.\src.c:67: P1 = 0b10000010;
      000104 75 90 82         [24]  503 	mov	_P1,#0x82
                                    504 ;	.\src.c:68: break;
                                    505 ;	.\src.c:69: case 7:
      000107 22               [24]  506 	ret
      000108                        507 00108$:
                                    508 ;	.\src.c:70: P1 = 0b11111000;
      000108 75 90 F8         [24]  509 	mov	_P1,#0xf8
                                    510 ;	.\src.c:71: break;
                                    511 ;	.\src.c:72: case 8:
      00010B 22               [24]  512 	ret
      00010C                        513 00109$:
                                    514 ;	.\src.c:73: P1 = 0b10000000;
      00010C 75 90 80         [24]  515 	mov	_P1,#0x80
                                    516 ;	.\src.c:74: break;
                                    517 ;	.\src.c:75: case 9:
      00010F 22               [24]  518 	ret
      000110                        519 00110$:
                                    520 ;	.\src.c:76: P1 = 0b10010000;
      000110 75 90 90         [24]  521 	mov	_P1,#0x90
                                    522 ;	.\src.c:80: }
      000113                        523 00113$:
                                    524 ;	.\src.c:81: }
      000113 22               [24]  525 	ret
                                    526 ;------------------------------------------------------------
                                    527 ;Allocation info for local variables in function 'func'
                                    528 ;------------------------------------------------------------
                                    529 ;	.\src.c:83: void func(void) __interrupt(1){
                                    530 ;	-----------------------------------------
                                    531 ;	 function func
                                    532 ;	-----------------------------------------
      000114                        533 _func:
      000114 C0 20            [24]  534 	push	bits
      000116 C0 E0            [24]  535 	push	acc
      000118 C0 F0            [24]  536 	push	b
      00011A C0 82            [24]  537 	push	dpl
      00011C C0 83            [24]  538 	push	dph
      00011E C0 07            [24]  539 	push	(0+7)
      000120 C0 06            [24]  540 	push	(0+6)
      000122 C0 05            [24]  541 	push	(0+5)
      000124 C0 04            [24]  542 	push	(0+4)
      000126 C0 03            [24]  543 	push	(0+3)
      000128 C0 02            [24]  544 	push	(0+2)
      00012A C0 01            [24]  545 	push	(0+1)
      00012C C0 00            [24]  546 	push	(0+0)
      00012E C0 D0            [24]  547 	push	psw
      000130 75 D0 00         [24]  548 	mov	psw,#0x00
                                    549 ;	.\src.c:84: TH0 = 0;
      000133 75 8C 00         [24]  550 	mov	_TH0,#0x00
                                    551 ;	.\src.c:85: TL0 = 0xC0;
      000136 75 8A C0         [24]  552 	mov	_TL0,#0xc0
                                    553 ;	.\src.c:87: value = readValue();
      000139 12 00 6D         [24]  554 	lcall	_readValue
      00013C 85 82 08         [24]  555 	mov	_value,dpl
                                    556 ;	.\src.c:88: if(value != 10)
      00013F 74 0A            [12]  557 	mov	a,#0x0a
      000141 B5 08 02         [24]  558 	cjne	a,_value,00112$
      000144 80 0A            [24]  559 	sjmp	00102$
      000146                        560 00112$:
                                    561 ;	.\src.c:90: P0_7 = 1;
                                    562 ;	assignBit
      000146 D2 87            [12]  563 	setb	_P0_7
                                    564 ;	.\src.c:91: printKey(value);
      000148 85 08 82         [24]  565 	mov	dpl, _value
      00014B 12 00 C3         [24]  566 	lcall	_printKey
      00014E 80 02            [24]  567 	sjmp	00104$
      000150                        568 00102$:
                                    569 ;	.\src.c:94: P0_7 = 0;
                                    570 ;	assignBit
      000150 C2 87            [12]  571 	clr	_P0_7
      000152                        572 00104$:
                                    573 ;	.\src.c:95: }
      000152 D0 D0            [24]  574 	pop	psw
      000154 D0 00            [24]  575 	pop	(0+0)
      000156 D0 01            [24]  576 	pop	(0+1)
      000158 D0 02            [24]  577 	pop	(0+2)
      00015A D0 03            [24]  578 	pop	(0+3)
      00015C D0 04            [24]  579 	pop	(0+4)
      00015E D0 05            [24]  580 	pop	(0+5)
      000160 D0 06            [24]  581 	pop	(0+6)
      000162 D0 07            [24]  582 	pop	(0+7)
      000164 D0 83            [24]  583 	pop	dph
      000166 D0 82            [24]  584 	pop	dpl
      000168 D0 F0            [24]  585 	pop	b
      00016A D0 E0            [24]  586 	pop	acc
      00016C D0 20            [24]  587 	pop	bits
      00016E 32               [24]  588 	reti
                                    589 ;------------------------------------------------------------
                                    590 ;Allocation info for local variables in function 'main'
                                    591 ;------------------------------------------------------------
                                    592 ;	.\src.c:97: int main()
                                    593 ;	-----------------------------------------
                                    594 ;	 function main
                                    595 ;	-----------------------------------------
      00016F                        596 _main:
                                    597 ;	.\src.c:99: TMOD = 1;
      00016F 75 89 01         [24]  598 	mov	_TMOD,#0x01
                                    599 ;	.\src.c:100: EA = 1;
                                    600 ;	assignBit
      000172 D2 AF            [12]  601 	setb	_EA
                                    602 ;	.\src.c:101: ET0 = 1;
                                    603 ;	assignBit
      000174 D2 A9            [12]  604 	setb	_ET0
                                    605 ;	.\src.c:102: TH0 = 0;
      000176 75 8C 00         [24]  606 	mov	_TH0,#0x00
                                    607 ;	.\src.c:103: TL0 = 0xC0;
      000179 75 8A C0         [24]  608 	mov	_TL0,#0xc0
                                    609 ;	.\src.c:104: TR0 = 1;
                                    610 ;	assignBit
      00017C D2 8C            [12]  611 	setb	_TR0
                                    612 ;	.\src.c:105: P0_7 = 0;
                                    613 ;	assignBit
      00017E C2 87            [12]  614 	clr	_P0_7
                                    615 ;	.\src.c:106: P3 = 0;
      000180 75 B0 00         [24]  616 	mov	_P3,#0x00
                                    617 ;	.\src.c:107: while(1);
      000183                        618 00102$:
                                    619 ;	.\src.c:108: }
      000183 80 FE            [24]  620 	sjmp	00102$
                                    621 	.area CSEG    (CODE)
                                    622 	.area CONST   (CODE)
                                    623 	.area XINIT   (CODE)
                                    624 	.area CABS    (ABS,CODE)
